[2024-03-15 20:38:50,877] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[93m [WARNING] [0m Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
[93m [WARNING] [0m sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.2
[93m [WARNING] [0m using untested triton version (2.1.0), only 1.0.0 is known to be compatible
[2024-03-15 20:39:01,105] [WARNING] [runner.py:202:fetch_hostfile] Unable to find hostfile, will proceed with training with local resources only.
[2024-03-15 20:39:01,106] [INFO] [runner.py:568:main] cmd = /usr/bin/python -u -m deepspeed.launcher.launch --world_info=eyJsb2NhbGhvc3QiOiBbMCwgMSwgMiwgM119 --master_addr=127.0.0.1 --master_port=29500 --enable_each_rank_log=None tools/load_hf_weight.py --hf-ckpt-num-shards 2 --origin-hf-ckpt-dir /workspace/models/llama-7b/ --save /workspace/models/llama-7b-mega-ds-T1P1 --tensor-model-parallel-size 1 --pipeline-model-parallel-size 1 --lr-warmup-iters 2000 --weight-decay 0.1 --clip-grad 1 --num-layers 32 --hidden-size 4096 --num-attention-heads 32 --ffn-hidden-size 11008 --attention-dropout 0 --hidden-dropout 0 --no-query-key-layer-scaling --disable-bias-linear --normalization rmsnorm --use-rotary-position-embeddings --untie-embeddings-and-output-weights --swiglu --seq-length 512 --max-position-embeddings 512 --micro-batch-size 16 --global-batch-size 256 --train-iters 3500 --lr 2e-5 --tensorboard-dir tensorboard_output --lr-decay-iters 320000 --lr-decay-style cosine --log-interval 1 --eval-iters 100 --eval-interval 100 --data-path /workspace/datasets/ --save-interval 1500 --split 100,0,0 --bf16 --zero-stage 0 --tokenizer-type HFTokenizer --tokenizer-model /workspace/models/llama-7b/ --deepspeed_config ./examples_deepspeed/finetune_hf_llama/ds_config.json --deepspeed --distributed-backend nccl --num-workers 0 --no-masked-softmax-fusion --no-bias-gelu-fusion --no-bias-dropout-fusion --no-gradient-accumulation-fusion --repeated-dataloader
[2024-03-15 20:39:04,301] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[93m [WARNING] [0m Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
[93m [WARNING] [0m sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.2
[93m [WARNING] [0m using untested triton version (2.1.0), only 1.0.0 is known to be compatible
[2024-03-15 20:39:14,380] [INFO] [launch.py:138:main] 0 NCCL_VERSION=2.19.4
[2024-03-15 20:39:14,380] [INFO] [launch.py:145:main] WORLD INFO DICT: {'localhost': [0, 1, 2, 3]}
[2024-03-15 20:39:14,380] [INFO] [launch.py:151:main] nnodes=1, num_local_procs=4, node_rank=0
[2024-03-15 20:39:14,380] [INFO] [launch.py:162:main] global_rank_mapping=defaultdict(<class 'list'>, {'localhost': [0, 1, 2, 3]})
[2024-03-15 20:39:14,380] [INFO] [launch.py:163:main] dist_world_size=4
[2024-03-15 20:39:14,380] [INFO] [launch.py:165:main] Setting CUDA_VISIBLE_DEVICES=0,1,2,3
[2024-03-15 20:39:14,381] [INFO] [launch.py:253:main] process 8956 spawned with command: ['/usr/bin/python', '-u', 'tools/load_hf_weight.py', '--local_rank=0', '--hf-ckpt-num-shards', '2', '--origin-hf-ckpt-dir', '/workspace/models/llama-7b/', '--save', '/workspace/models/llama-7b-mega-ds-T1P1', '--tensor-model-parallel-size', '1', '--pipeline-model-parallel-size', '1', '--lr-warmup-iters', '2000', '--weight-decay', '0.1', '--clip-grad', '1', '--num-layers', '32', '--hidden-size', '4096', '--num-attention-heads', '32', '--ffn-hidden-size', '11008', '--attention-dropout', '0', '--hidden-dropout', '0', '--no-query-key-layer-scaling', '--disable-bias-linear', '--normalization', 'rmsnorm', '--use-rotary-position-embeddings', '--untie-embeddings-and-output-weights', '--swiglu', '--seq-length', '512', '--max-position-embeddings', '512', '--micro-batch-size', '16', '--global-batch-size', '256', '--train-iters', '3500', '--lr', '2e-5', '--tensorboard-dir', 'tensorboard_output', '--lr-decay-iters', '320000', '--lr-decay-style', 'cosine', '--log-interval', '1', '--eval-iters', '100', '--eval-interval', '100', '--data-path', '/workspace/datasets/', '--save-interval', '1500', '--split', '100,0,0', '--bf16', '--zero-stage', '0', '--tokenizer-type', 'HFTokenizer', '--tokenizer-model', '/workspace/models/llama-7b/', '--deepspeed_config', './examples_deepspeed/finetune_hf_llama/ds_config.json', '--deepspeed', '--distributed-backend', 'nccl', '--num-workers', '0', '--no-masked-softmax-fusion', '--no-bias-gelu-fusion', '--no-bias-dropout-fusion', '--no-gradient-accumulation-fusion', '--repeated-dataloader']
[2024-03-15 20:39:14,382] [INFO] [launch.py:253:main] process 8957 spawned with command: ['/usr/bin/python', '-u', 'tools/load_hf_weight.py', '--local_rank=1', '--hf-ckpt-num-shards', '2', '--origin-hf-ckpt-dir', '/workspace/models/llama-7b/', '--save', '/workspace/models/llama-7b-mega-ds-T1P1', '--tensor-model-parallel-size', '1', '--pipeline-model-parallel-size', '1', '--lr-warmup-iters', '2000', '--weight-decay', '0.1', '--clip-grad', '1', '--num-layers', '32', '--hidden-size', '4096', '--num-attention-heads', '32', '--ffn-hidden-size', '11008', '--attention-dropout', '0', '--hidden-dropout', '0', '--no-query-key-layer-scaling', '--disable-bias-linear', '--normalization', 'rmsnorm', '--use-rotary-position-embeddings', '--untie-embeddings-and-output-weights', '--swiglu', '--seq-length', '512', '--max-position-embeddings', '512', '--micro-batch-size', '16', '--global-batch-size', '256', '--train-iters', '3500', '--lr', '2e-5', '--tensorboard-dir', 'tensorboard_output', '--lr-decay-iters', '320000', '--lr-decay-style', 'cosine', '--log-interval', '1', '--eval-iters', '100', '--eval-interval', '100', '--data-path', '/workspace/datasets/', '--save-interval', '1500', '--split', '100,0,0', '--bf16', '--zero-stage', '0', '--tokenizer-type', 'HFTokenizer', '--tokenizer-model', '/workspace/models/llama-7b/', '--deepspeed_config', './examples_deepspeed/finetune_hf_llama/ds_config.json', '--deepspeed', '--distributed-backend', 'nccl', '--num-workers', '0', '--no-masked-softmax-fusion', '--no-bias-gelu-fusion', '--no-bias-dropout-fusion', '--no-gradient-accumulation-fusion', '--repeated-dataloader']
[2024-03-15 20:39:14,382] [INFO] [launch.py:253:main] process 8958 spawned with command: ['/usr/bin/python', '-u', 'tools/load_hf_weight.py', '--local_rank=2', '--hf-ckpt-num-shards', '2', '--origin-hf-ckpt-dir', '/workspace/models/llama-7b/', '--save', '/workspace/models/llama-7b-mega-ds-T1P1', '--tensor-model-parallel-size', '1', '--pipeline-model-parallel-size', '1', '--lr-warmup-iters', '2000', '--weight-decay', '0.1', '--clip-grad', '1', '--num-layers', '32', '--hidden-size', '4096', '--num-attention-heads', '32', '--ffn-hidden-size', '11008', '--attention-dropout', '0', '--hidden-dropout', '0', '--no-query-key-layer-scaling', '--disable-bias-linear', '--normalization', 'rmsnorm', '--use-rotary-position-embeddings', '--untie-embeddings-and-output-weights', '--swiglu', '--seq-length', '512', '--max-position-embeddings', '512', '--micro-batch-size', '16', '--global-batch-size', '256', '--train-iters', '3500', '--lr', '2e-5', '--tensorboard-dir', 'tensorboard_output', '--lr-decay-iters', '320000', '--lr-decay-style', 'cosine', '--log-interval', '1', '--eval-iters', '100', '--eval-interval', '100', '--data-path', '/workspace/datasets/', '--save-interval', '1500', '--split', '100,0,0', '--bf16', '--zero-stage', '0', '--tokenizer-type', 'HFTokenizer', '--tokenizer-model', '/workspace/models/llama-7b/', '--deepspeed_config', './examples_deepspeed/finetune_hf_llama/ds_config.json', '--deepspeed', '--distributed-backend', 'nccl', '--num-workers', '0', '--no-masked-softmax-fusion', '--no-bias-gelu-fusion', '--no-bias-dropout-fusion', '--no-gradient-accumulation-fusion', '--repeated-dataloader']
[2024-03-15 20:39:14,383] [INFO] [launch.py:253:main] process 8959 spawned with command: ['/usr/bin/python', '-u', 'tools/load_hf_weight.py', '--local_rank=3', '--hf-ckpt-num-shards', '2', '--origin-hf-ckpt-dir', '/workspace/models/llama-7b/', '--save', '/workspace/models/llama-7b-mega-ds-T1P1', '--tensor-model-parallel-size', '1', '--pipeline-model-parallel-size', '1', '--lr-warmup-iters', '2000', '--weight-decay', '0.1', '--clip-grad', '1', '--num-layers', '32', '--hidden-size', '4096', '--num-attention-heads', '32', '--ffn-hidden-size', '11008', '--attention-dropout', '0', '--hidden-dropout', '0', '--no-query-key-layer-scaling', '--disable-bias-linear', '--normalization', 'rmsnorm', '--use-rotary-position-embeddings', '--untie-embeddings-and-output-weights', '--swiglu', '--seq-length', '512', '--max-position-embeddings', '512', '--micro-batch-size', '16', '--global-batch-size', '256', '--train-iters', '3500', '--lr', '2e-5', '--tensorboard-dir', 'tensorboard_output', '--lr-decay-iters', '320000', '--lr-decay-style', 'cosine', '--log-interval', '1', '--eval-iters', '100', '--eval-interval', '100', '--data-path', '/workspace/datasets/', '--save-interval', '1500', '--split', '100,0,0', '--bf16', '--zero-stage', '0', '--tokenizer-type', 'HFTokenizer', '--tokenizer-model', '/workspace/models/llama-7b/', '--deepspeed_config', './examples_deepspeed/finetune_hf_llama/ds_config.json', '--deepspeed', '--distributed-backend', 'nccl', '--num-workers', '0', '--no-masked-softmax-fusion', '--no-bias-gelu-fusion', '--no-bias-dropout-fusion', '--no-gradient-accumulation-fusion', '--repeated-dataloader']
[2024-03-15 20:39:17,727] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-03-15 20:39:17,747] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-03-15 20:39:17,768] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-03-15 20:39:17,776] [INFO] [real_accelerator.py:203:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[93m [WARNING] [0m Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
[93m [WARNING] [0m Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
[93m [WARNING] [0m Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
[93m [WARNING] [0m Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
[93m [WARNING] [0m sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.2
[93m [WARNING] [0m using untested triton version (2.1.0), only 1.0.0 is known to be compatible
[93m [WARNING] [0m sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.2
[93m [WARNING] [0m using untested triton version (2.1.0), only 1.0.0 is known to be compatible
[93m [WARNING] [0m sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.2
[93m [WARNING] [0m using untested triton version (2.1.0), only 1.0.0 is known to be compatible
[93m [WARNING] [0m sparse_attn requires a torch version >= 1.5 and < 2.0 but detected 2.2
[93m [WARNING] [0m using untested triton version (2.1.0), only 1.0.0 is known to be compatible
using world size: 4, data-parallel-size: 4, sequence-parallel size: 1, tensor-model-parallel size: 1, pipeline-model-parallel size: 1 
accumulate and all-reduce gradients in fp32 for bfloat16 data type.
using torch.bfloat16 for parameters ...
------------------------ arguments ------------------------
  accumulate_allreduce_grads_in_fp32 .............. True
  adam_beta1 ...................................... 0.9
  adam_beta2 ...................................... 0.999
  adam_eps ........................................ 1e-08
  add_bias_linear ................................. False
  add_position_embedding .......................... False
  adlr_autoresume ................................. False
  adlr_autoresume_interval ........................ 1000
  aml_data_download_path .......................... None
  apply_layernorm_1p .............................. False
  apply_query_key_layer_scaling ................... False
  apply_residual_connection_post_layernorm ........ False
  async_tensor_model_parallel_allreduce ........... False
  attention_dropout ............................... 0.0
  attention_softmax_in_fp32 ....................... False
  barrier_with_L1_time ............................ True
  bert_binary_head ................................ True
  bert_embedder_type .............................. megatron
  bert_load ....................................... None
  bf16 ............................................ True
  bias_dropout_fusion ............................. False
  bias_gelu_fusion ................................ False
  biencoder_projection_dim ........................ 0
  biencoder_shared_query_context_model ............ False
  block_data_path ................................. None
  checkpoint_activations .......................... False
  checkpoint_in_cpu ............................... False
  checkpoint_num_layers ........................... 1
  classes_fraction ................................ 1.0
  clip_grad ....................................... 1.0
  compression_training ............................ False
  consumed_train_samples .......................... 0
  consumed_train_tokens ........................... 0
  consumed_valid_samples .......................... 0
  contigious_checkpointing ........................ False
  cpu_optimizer ................................... False
  cpu_torch_adam .................................. False
  create_moe_param_group .......................... False
  curriculum_learning_legacy ...................... False
  data_cache_path ................................. None
  data_efficiency_curriculum_learning ............. False
  data_impl ....................................... infer
  data_parallel_random_init ....................... False
  data_parallel_size .............................. 4
  data_path ....................................... ['/workspace/datasets/']
  data_per_class_fraction ......................... 1.0
  data_sharding ................................... True
  dataloader_type ................................. single
  DDP_impl ........................................ local
  decoder_num_layers .............................. None
  decoder_seq_length .............................. None
  deepscale ....................................... False
  deepscale_config ................................ None
  deepspeed ....................................... True
  deepspeed_activation_checkpointing .............. False
  deepspeed_config ................................ ./examples_deepspeed/finetune_hf_llama/ds_config.json
  dino_bottleneck_size ............................ 256
  dino_freeze_last_layer .......................... 1
  dino_head_hidden_size ........................... 2048
  dino_local_crops_number ......................... 10
  dino_local_img_size ............................. 96
  dino_norm_last_layer ............................ False
  dino_teacher_temp ............................... 0.07
  dino_warmup_teacher_temp ........................ 0.04
  dino_warmup_teacher_temp_epochs ................. 30
  distribute_checkpointed_activations ............. False
  distribute_saved_activations .................... False
  distributed_backend ............................. nccl
  distributed_timeout_minutes ..................... 10
  ds_fused_adam ................................... False
  ds_inference .................................... False
  ds_pipeline_enabled ............................. True
  ds_sequence_parallel_size ....................... 1
  embedding_path .................................. None
  embedding_weights_in_fp32 ....................... False
  empty_unused_memory_level ....................... 0
  enable_expert_tensor_parallelism ................ False
  encoder_num_layers .............................. 32
  encoder_seq_length .............................. 512
  end_weight_decay ................................ 0.1
  eod_mask_loss ................................... False
  eval_interval ................................... 100
  eval_iters ...................................... 100
  evidence_data_path .............................. None
  exit_duration_in_mins ........................... None
  exit_interval ................................... None
  exit_on_missing_checkpoint ...................... False
  exit_signal_handler ............................. False
  expert_interval ................................. 2
  ffn_hidden_size ................................. 11008
  finetune ........................................ False
  force_ds_sequence_parallel ...................... False
  fp16 ............................................ False
  fp16_lm_cross_entropy ........................... False
  fp32_residual_connection ........................ False
  fp8_amax_compute_algo ........................... most_recent
  fp8_amax_history_len ............................ 1
  fp8_e4m3 ........................................ False
  fp8_hybrid ...................................... False
  fp8_interval .................................... 1
  fp8_margin ...................................... 0
  fp8_wgrad ....................................... True
  global_batch_size ............................... 256
  gradient_accumulation_fusion .................... False
  head_lr_mult .................................... 1.0
  hf_ckpt_num_shards .............................. 2
  hidden_dropout .................................. 0.0
  hidden_size ..................................... 4096
  hidden_size_teacher ............................. None
  hysteresis ...................................... 2
  ict_head_size ................................... None
  ict_load ........................................ None
  img_h ........................................... 224
  img_w ........................................... 224
  indexer_batch_size .............................. 128
  indexer_log_interval ............................ 1000
  inference ....................................... False
  inference_batch_times_seqlen_threshold .......... 512
  init_method_std ................................. 0.02
  init_method_xavier_uniform ...................... False
  initial_loss_scale .............................. 4294967296
  iter_per_epoch .................................. 1250
  kd .............................................. False
  kd_alpha_ce ..................................... 1
  kd_beta_ce ...................................... 1
  kd_temp ......................................... 1.0
  kv_channels ..................................... 128
  layernorm_epsilon ............................... 1e-05
  lazy_mpu_init ................................... None
  load ............................................ None
  load_teacher .................................... None
  local_rank ...................................... 0
  log_batch_size_to_tensorboard ................... False
  log_interval .................................... 1
  log_learning_rate_to_tensorboard ................ True
  log_loss_scale_to_tensorboard ................... True
  log_memory_to_tensorboard ....................... False
  log_num_zeros_in_grad ........................... False
  log_optimizer_states_to_tensorboard ............. False
  log_params_norm ................................. False
  log_timers_to_tensorboard ....................... False
  log_validation_ppl_to_tensorboard ............... False
  log_world_size_to_tensorboard ................... False
  loss_scale ...................................... None
  loss_scale_window ............................... 1000
  lr .............................................. 2e-05
  lr_decay_iters .................................. 320000
  lr_decay_samples ................................ None
  lr_decay_style .................................. cosine
  lr_decay_tokens ................................. None
  lr_warmup_fraction .............................. None
  lr_warmup_iters ................................. 2000
  lr_warmup_samples ............................... 0
  lr_warmup_tokens ................................ None
  make_vocab_size_divisible_by .................... 128
  mask_factor ..................................... 1.0
  mask_prob ....................................... 0.15
  mask_type ....................................... random
  masked_softmax_fusion ........................... False
  max_position_embeddings ......................... 512
  max_tokens_to_oom ............................... 12000
  mem_efficient_ln ................................ True
  memory_centric_tiled_linear ..................... False
  merge_file ...................................... None
  micro_batch_size ................................ 16
  min_loss_scale .................................. 1.0
  min_lr .......................................... 0.0
  mlp_type ........................................ standard
  mmap_warmup ..................................... False
  moe_eval_capacity_factor ........................ 1.0
  moe_expert_parallel_size ........................ 1
  moe_loss_coeff .................................. 0.1
  moe_min_capacity ................................ 4
  moe_token_dropping .............................. True
  moe_train_capacity_factor ....................... 1.0
  mos ............................................. False
  no_load_lr_state ................................ False
  no_load_optim ................................... None
  no_load_rng ..................................... None
  no_persist_layer_norm ........................... False
  no_pipeline_parallel ............................ False
  no_save_optim ................................... None
  no_save_rng ..................................... None
  normalization ................................... rmsnorm
  num_attention_heads ............................. 32
  num_attention_heads_teacher ..................... None
  num_channels .................................... 3
  num_classes ..................................... 1000
  num_experts ..................................... [1]
  num_experts_switch .............................. None
  num_experts_teacher ............................. [1]
  num_key_value_heads ............................. 32
  num_layers ...................................... 32
  num_layers_per_virtual_pipeline_stage ........... None
  num_layers_teacher .............................. None
  num_workers ..................................... 0
  onnx_safe ....................................... None
  openai_gelu ..................................... False
  optimizer ....................................... adam
  origin_hf_ckpt_dir .............................. /workspace/models/llama-7b/
  output_bert_embeddings .......................... False
  overlap_p2p_comm ................................ False
  override_opt_param_scheduler .................... False
  params_dtype .................................... torch.bfloat16
  partition_activations ........................... False
  patch_dim ....................................... 16
  perform_initialization .......................... True
  pipeline_model_parallel_size .................... 1
  pipeline_model_parallel_split_rank .............. None
  profile ......................................... False
  profile_backward ................................ False
  profile_step_end ................................ 12
  profile_step_start .............................. 10
  profile_trace_path .............................. None
  query_in_block_prob ............................. 0.1
  rampup_batch_size ............................... None
  random_ltd ...................................... False
  rank ............................................ 0
  recompute_granularity ........................... None
  recompute_method ................................ None
  recompute_num_layers ............................ 1
  remote_device ................................... none
  repeated_dataloader ............................. True
  reset_attention_mask ............................ False
  reset_iteration ................................. False
  reset_position_ids .............................. False
  retriever_report_topk_accuracies ................ []
  retriever_score_scaling ......................... False
  retriever_seq_length ............................ 256
  retro_add_retriever ............................. False
  retro_cyclic_train_iters ........................ None
  retro_encoder_attention_dropout ................. 0.1
  retro_encoder_hidden_dropout .................... 0.1
  retro_encoder_layers ............................ 2
  retro_num_neighbors ............................. 2
  retro_num_retrieved_chunks ...................... 2
  retro_return_doc_ids ............................ False
  retro_workdir ................................... None
  return_data_index ............................... False
  rotary_percent .................................. 1.0
  sample_rate ..................................... 1.0
  save ............................................ /workspace/models/llama-7b-mega-ds-T1P1
  save_interval ................................... 1500
  scatter_gather_tensors_in_pipeline .............. True
  scattered_embeddings ............................ False
  seed ............................................ 1234
  seq_length ...................................... 512
  sequence_parallel ............................... False
  sgd_momentum .................................... 0.9
  short_seq_prob .................................. 0.1
  skip_train ...................................... False
  split ........................................... 100,0,0
  split_transformers .............................. False
  squared_relu .................................... False
  standalone_embedding_stage ...................... False
  start_weight_decay .............................. 0.1
  swiglu .......................................... True
  swin_backbone_type .............................. tiny
  synchronize_each_layer .......................... False
  tensor_model_parallel_size ...................... 1
  tensorboard_dir ................................. tensorboard_output
  tensorboard_log_interval ........................ 1
  tensorboard_queue_size .......................... 1000
  test_data_path .................................. None
  tile_factor ..................................... 1
  timing_log_level ................................ 0
  timing_log_option ............................... minmax
  titles_data_path ................................ None
  tokenizer_model ................................. /workspace/models/llama-7b/
  tokenizer_type .................................. HFTokenizer
  topk ............................................ 1
  train_data_exact_num_epochs ..................... None
  train_data_path ................................. None
  train_desc_path ................................. None
  train_doc_idx_path .............................. None
  train_idx_path .................................. None
  train_iters ..................................... 3500
  train_sample_idx_path ........................... None
  train_samples ................................... None
  train_shuffle_idx_path .......................... None
  train_tokens .................................... None
  transformer_impl ................................ local
  transformer_pipeline_model_parallel_size ........ 1
  universal_checkpoint ............................ False
  untie_embeddings_and_output_weights ............. True
  use_checkpoint_args ............................. False
  use_checkpoint_opt_param_scheduler .............. False
  use_contiguous_buffers_in_local_ddp ............. True
  use_cpu_initialization .......................... None
  use_dataset_only ................................ False
  use_distributed_optimizer ....................... False
  use_flash_attn .................................. False
  use_flash_attn_triton ........................... False
  use_flash_attn_v1 ............................... False
  use_flash_attn_v2 ............................... False
  use_one_sent_docs ............................... False
  use_pin_memory .................................. False
  use_ring_exchange_p2p ........................... False
  use_rotary_position_embeddings .................. True
  use_tutel ....................................... False
  valid_data_path ................................. None
  variable_seq_lengths ............................ False
  virtual_pipeline_model_parallel_size ............ None
  vision_backbone_type ............................ vit
  vision_pretraining .............................. False
  vision_pretraining_type ......................... classify
  vocab_extra_ids ................................. 0
  vocab_file ...................................... None
  vocab_size ...................................... None
  weight_decay .................................... 0.1
  weight_decay_incr_style ......................... constant
  with_stack ...................................... False
  world_size ...................................... 4
  zero_allgather_bucket_size ...................... 0.0
  zero_contigious_gradients ....................... False
  zero_reduce_bucket_size ......................... 0.0
  zero_reduce_scatter ............................. False
  zero_stage ...................................... 0
-------------------- end of arguments ---------------------
setting number of micro-batches to constant 4
> building HFTokenizer tokenizer ...
 > padded vocab (size: 32000) with 0 dummy tokens (new size: 32000)
> initializing torch distributed ...
[2024-03-15 20:39:28,758] [INFO] [comm.py:637:init_distributed] cdb=None
[2024-03-15 20:39:28,758] [INFO] [comm.py:668:init_distributed] Initializing TorchBackend in DeepSpeed with backend nccl
> setting tensorboard ...
[2024-03-15 20:39:29,301] [INFO] [comm.py:637:init_distributed] cdb=None
[2024-03-15 20:39:29,313] [INFO] [comm.py:637:init_distributed] cdb=None
[2024-03-15 20:39:29,329] [INFO] [comm.py:637:init_distributed] cdb=None
> initialized tensor model parallel with size 1
> initialized pipeline model parallel with size 1
> setting random seeds to 1234 ...
> initializing model parallel cuda seeds on global rank 0, model parallel rank 0, and data parallel rank 0 with model parallel seed: 3952 and data parallel seed: 1234
> compiling dataset index builder ...
make: Entering directory '/workspace/megatron_deepspeed/megatron/data'
make: Nothing to be done for 'default'.
make: Leaving directory '/workspace/megatron_deepspeed/megatron/data'
>>> done with dataset index builder. Compilation time: 0.043 seconds
WARNING: constraints for invoking optimized fused softmax kernel are not met. We default back to unfused kernel invocations.
> compiling and loading fused kernels ...
>>> done with compiling and loading fused kernels. Compilation time: 0.712 seconds
building model ...
[2024-03-15 20:39:30,248] [INFO] [utils.py:800:see_memory_usage] Before Building Model
[2024-03-15 20:39:30,249] [INFO] [utils.py:801:see_memory_usage] MA 0.0 GB         Max_MA 0.0 GB         CA 0.0 GB         Max_CA 0 GB 
[2024-03-15 20:39:30,250] [INFO] [utils.py:808:see_memory_usage] CPU Virtual Memory:  used = 8.88 GB, percent = 3.7%
SEED_LAYERS=False BASE_SEED=1234 SEED_FN=None
Using topology: {ProcessCoord(pipe=0, data=0, model=0): 0, ProcessCoord(pipe=0, data=1, model=0): 1, ProcessCoord(pipe=0, data=2, model=0): 2, ProcessCoord(pipe=0, data=3, model=0): 3}
[2024-03-15 20:39:30,254] [INFO] [module.py:375:_partition_layers] Partitioning pipeline stages with method type:transformer
stage=0 layers=37
     0: _to_float16
     1: EmbeddingPipe
     2: ParallelTransformerLayerPipe
     3: ParallelTransformerLayerPipe
     4: ParallelTransformerLayerPipe
     5: ParallelTransformerLayerPipe
     6: ParallelTransformerLayerPipe
     7: ParallelTransformerLayerPipe
     8: ParallelTransformerLayerPipe
     9: ParallelTransformerLayerPipe
    10: ParallelTransformerLayerPipe
    11: ParallelTransformerLayerPipe
    12: ParallelTransformerLayerPipe
    13: ParallelTransformerLayerPipe
    14: ParallelTransformerLayerPipe
    15: ParallelTransformerLayerPipe
    16: ParallelTransformerLayerPipe
    17: ParallelTransformerLayerPipe
    18: ParallelTransformerLayerPipe
    19: ParallelTransformerLayerPipe
    20: ParallelTransformerLayerPipe
    21: ParallelTransformerLayerPipe
    22: ParallelTransformerLayerPipe
    23: ParallelTransformerLayerPipe
    24: ParallelTransformerLayerPipe
    25: ParallelTransformerLayerPipe
    26: ParallelTransformerLayerPipe
    27: ParallelTransformerLayerPipe
    28: ParallelTransformerLayerPipe
    29: ParallelTransformerLayerPipe
    30: ParallelTransformerLayerPipe
    31: ParallelTransformerLayerPipe
    32: ParallelTransformerLayerPipe
    33: ParallelTransformerLayerPipe
    34: MixedFusedRMSNorm
    35: LMHeadPipe
    36: float16_to_fp32
  loss: CrossEntropy
1 GPTModelPipe(
  (tied_modules): ModuleDict()
  (1): EmbeddingPipe(
    (word_embeddings): VocabParallelEmbedding()
    (embedding_dropout): Dropout(p=0.0, inplace=False)
  )
  (2): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (3): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (4): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (5): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (6): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (7): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (8): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (9): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (10): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (11): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (12): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (13): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (14): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (15): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (16): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (17): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (18): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (19): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (20): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (21): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (22): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (23): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (24): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (25): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (26): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (27): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (28): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (29): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (30): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (31): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (32): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (33): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (34): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
  (35): LMHeadPipe(
    (lm_head): ColumnParallelLinear()
  )
)
[2024-03-15 20:39:30,551] [INFO] [utils.py:800:see_memory_usage] After Building Model
[2024-03-15 20:39:30,552] [INFO] [utils.py:801:see_memory_usage] MA 12.55 GB         Max_MA 12.55 GB         CA 12.55 GB         Max_CA 13 GB 
[2024-03-15 20:39:30,552] [INFO] [utils.py:808:see_memory_usage] CPU Virtual Memory:  used = 10.31 GB, percent = 4.3%
0 GPTModelPipe(
  (tied_modules): ModuleDict()
  (1): EmbeddingPipe(
    (word_embeddings): VocabParallelEmbedding()
    (embedding_dropout): Dropout(p=0.0, inplace=False)
  )
  (2): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (3): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (4): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (5): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (6): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (7): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (8): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (9): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (10): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (11): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (12): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (13): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (14): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (15): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (16): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (17): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (18): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (19): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (20): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (21): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (22): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (23): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (24): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (25): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (26): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (27): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (28): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (29): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (30): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (31): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (32): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (33): ParallelTransformerLayerPipe(
    (input_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (self_attention): ParallelAttention(
      (query_key_value): ColumnParallelLinear()
      (core_attention): CoreAttention(
        (scale_mask_softmax): FusedScaleMaskSoftmax()
        (attention_dropout): Dropout(p=0.0, inplace=False)
      )
      (dense): RowParallelLinear()
    )
    (post_attention_layernorm): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
    (mlp): ParallelMLP(
      (dense_h_to_4h): ColumnParallelLinear()
      (dense_4h_to_h): RowParallelLinear()
    )
  )
  (34): MixedFusedRMSNorm(torch.Size([4096]), eps=1e-05, elementwise_affine=True)
  (35): LMHeadPipe(
    (lm_head): ColumnParallelLinear()
  )
)
----------------------------hf weight list----------------------------
model.embed_tokens.weight
model.layers.0.self_attn.q_proj.weight
model.layers.0.self_attn.k_proj.weight
model.layers.0.self_attn.v_proj.weight
model.layers.0.self_attn.o_proj.weight
model.layers.0.self_attn.rotary_emb.inv_freq
model.layers.0.mlp.gate_proj.weight
model.layers.0.mlp.down_proj.weight
model.layers.0.mlp.up_proj.weight
model.layers.0.input_layernorm.weight
model.layers.0.post_attention_layernorm.weight
model.layers.1.self_attn.q_proj.weight
model.layers.1.self_attn.k_proj.weight
model.layers.1.self_attn.v_proj.weight
model.layers.1.self_attn.o_proj.weight
model.layers.1.self_attn.rotary_emb.inv_freq
model.layers.1.mlp.gate_proj.weight
model.layers.1.mlp.down_proj.weight
model.layers.1.mlp.up_proj.weight
model.layers.1.input_layernorm.weight
model.layers.1.post_attention_layernorm.weight
model.layers.2.self_attn.q_proj.weight
model.layers.2.self_attn.k_proj.weight
model.layers.2.self_attn.v_proj.weight
model.layers.2.self_attn.o_proj.weight
model.layers.2.self_attn.rotary_emb.inv_freq
model.layers.2.mlp.gate_proj.weight
model.layers.2.mlp.down_proj.weight
model.layers.2.mlp.up_proj.weight
model.layers.2.input_layernorm.weight
model.layers.2.post_attention_layernorm.weight
model.layers.3.self_attn.q_proj.weight
model.layers.3.self_attn.k_proj.weight
model.layers.3.self_attn.v_proj.weight
model.layers.3.self_attn.o_proj.weight
model.layers.3.self_attn.rotary_emb.inv_freq
model.layers.3.mlp.gate_proj.weight
model.layers.3.mlp.down_proj.weight
model.layers.3.mlp.up_proj.weight
model.layers.3.input_layernorm.weight
model.layers.3.post_attention_layernorm.weight
model.layers.4.self_attn.q_proj.weight
model.layers.4.self_attn.k_proj.weight
model.layers.4.self_attn.v_proj.weight
model.layers.4.self_attn.o_proj.weight
model.layers.4.self_attn.rotary_emb.inv_freq
model.layers.4.mlp.gate_proj.weight
model.layers.4.mlp.down_proj.weight
model.layers.4.mlp.up_proj.weight
model.layers.4.input_layernorm.weight
model.layers.4.post_attention_layernorm.weight
model.layers.5.self_attn.q_proj.weight
model.layers.5.self_attn.k_proj.weight
model.layers.5.self_attn.v_proj.weight
model.layers.5.self_attn.o_proj.weight
model.layers.5.self_attn.rotary_emb.inv_freq
model.layers.5.mlp.gate_proj.weight
model.layers.5.mlp.down_proj.weight
model.layers.5.mlp.up_proj.weight
model.layers.5.input_layernorm.weight
model.layers.5.post_attention_layernorm.weight
model.layers.6.self_attn.q_proj.weight
model.layers.6.self_attn.k_proj.weight
model.layers.6.self_attn.v_proj.weight
model.layers.6.self_attn.o_proj.weight
model.layers.6.self_attn.rotary_emb.inv_freq
model.layers.6.mlp.gate_proj.weight
model.layers.6.mlp.down_proj.weight
model.layers.6.mlp.up_proj.weight
model.layers.6.input_layernorm.weight
model.layers.6.post_attention_layernorm.weight
model.layers.7.self_attn.q_proj.weight
model.layers.7.self_attn.k_proj.weight
model.layers.7.self_attn.v_proj.weight
model.layers.7.self_attn.o_proj.weight
model.layers.7.self_attn.rotary_emb.inv_freq
model.layers.7.mlp.gate_proj.weight
model.layers.7.mlp.down_proj.weight
model.layers.7.mlp.up_proj.weight
model.layers.7.input_layernorm.weight
model.layers.7.post_attention_layernorm.weight
model.layers.8.self_attn.q_proj.weight
model.layers.8.self_attn.k_proj.weight
model.layers.8.self_attn.v_proj.weight
model.layers.8.self_attn.o_proj.weight
model.layers.8.self_attn.rotary_emb.inv_freq
model.layers.8.mlp.gate_proj.weight
model.layers.8.mlp.down_proj.weight
model.layers.8.mlp.up_proj.weight
model.layers.8.input_layernorm.weight
model.layers.8.post_attention_layernorm.weight
model.layers.9.self_attn.q_proj.weight
model.layers.9.self_attn.k_proj.weight
model.layers.9.self_attn.v_proj.weight
model.layers.9.self_attn.o_proj.weight
model.layers.9.self_attn.rotary_emb.inv_freq
model.layers.9.mlp.gate_proj.weight
model.layers.9.mlp.down_proj.weight
model.layers.9.mlp.up_proj.weight
model.layers.9.input_layernorm.weight
model.layers.9.post_attention_layernorm.weight
model.layers.10.self_attn.q_proj.weight
model.layers.10.self_attn.k_proj.weight
model.layers.10.self_attn.v_proj.weight
model.layers.10.self_attn.o_proj.weight
model.layers.10.self_attn.rotary_emb.inv_freq
model.layers.10.mlp.gate_proj.weight
model.layers.10.mlp.down_proj.weight
model.layers.10.mlp.up_proj.weight
model.layers.10.input_layernorm.weight
model.layers.10.post_attention_layernorm.weight
model.layers.11.self_attn.q_proj.weight
model.layers.11.self_attn.k_proj.weight
model.layers.11.self_attn.v_proj.weight
model.layers.11.self_attn.o_proj.weight
model.layers.11.self_attn.rotary_emb.inv_freq
model.layers.11.mlp.gate_proj.weight
model.layers.11.mlp.down_proj.weight
model.layers.11.mlp.up_proj.weight
model.layers.11.input_layernorm.weight
model.layers.11.post_attention_layernorm.weight
model.layers.12.self_attn.q_proj.weight
model.layers.12.self_attn.k_proj.weight
model.layers.12.self_attn.v_proj.weight
model.layers.12.self_attn.o_proj.weight
model.layers.12.self_attn.rotary_emb.inv_freq
model.layers.12.mlp.gate_proj.weight
model.layers.12.mlp.down_proj.weight
model.layers.12.mlp.up_proj.weight
model.layers.12.input_layernorm.weight
model.layers.12.post_attention_layernorm.weight
model.layers.13.self_attn.q_proj.weight
model.layers.13.self_attn.k_proj.weight
model.layers.13.self_attn.v_proj.weight
model.layers.13.self_attn.o_proj.weight
model.layers.13.self_attn.rotary_emb.inv_freq
model.layers.13.mlp.gate_proj.weight
model.layers.13.mlp.down_proj.weight
model.layers.13.mlp.up_proj.weight
model.layers.13.input_layernorm.weight
model.layers.13.post_attention_layernorm.weight
model.layers.14.self_attn.q_proj.weight
model.layers.14.self_attn.k_proj.weight
model.layers.14.self_attn.v_proj.weight
model.layers.14.self_attn.o_proj.weight
model.layers.14.self_attn.rotary_emb.inv_freq
model.layers.14.mlp.gate_proj.weight
model.layers.14.mlp.down_proj.weight
model.layers.14.mlp.up_proj.weight
model.layers.14.input_layernorm.weight
model.layers.14.post_attention_layernorm.weight
model.layers.15.self_attn.q_proj.weight
model.layers.15.self_attn.k_proj.weight
model.layers.15.self_attn.v_proj.weight
model.layers.15.self_attn.o_proj.weight
model.layers.15.self_attn.rotary_emb.inv_freq
model.layers.15.mlp.gate_proj.weight
model.layers.15.mlp.down_proj.weight
model.layers.15.mlp.up_proj.weight
model.layers.15.input_layernorm.weight
model.layers.15.post_attention_layernorm.weight
model.layers.16.self_attn.q_proj.weight
model.layers.16.self_attn.k_proj.weight
model.layers.16.self_attn.v_proj.weight
model.layers.16.self_attn.o_proj.weight
model.layers.16.self_attn.rotary_emb.inv_freq
model.layers.16.mlp.gate_proj.weight
model.layers.16.mlp.down_proj.weight
model.layers.16.mlp.up_proj.weight
model.layers.16.input_layernorm.weight
model.layers.16.post_attention_layernorm.weight
model.layers.17.self_attn.q_proj.weight
model.layers.17.self_attn.k_proj.weight
model.layers.17.self_attn.v_proj.weight
model.layers.17.self_attn.o_proj.weight
model.layers.17.self_attn.rotary_emb.inv_freq
model.layers.17.mlp.gate_proj.weight
model.layers.17.mlp.down_proj.weight
model.layers.17.mlp.up_proj.weight
model.layers.17.input_layernorm.weight
model.layers.17.post_attention_layernorm.weight
model.layers.18.self_attn.q_proj.weight
model.layers.18.self_attn.k_proj.weight
model.layers.18.self_attn.v_proj.weight
model.layers.18.self_attn.o_proj.weight
model.layers.18.self_attn.rotary_emb.inv_freq
model.layers.18.mlp.gate_proj.weight
model.layers.18.mlp.down_proj.weight
model.layers.18.mlp.up_proj.weight
model.layers.18.input_layernorm.weight
model.layers.18.post_attention_layernorm.weight
model.layers.19.self_attn.q_proj.weight
model.layers.19.self_attn.k_proj.weight
model.layers.19.self_attn.v_proj.weight
model.layers.19.self_attn.o_proj.weight
model.layers.19.self_attn.rotary_emb.inv_freq
model.layers.19.mlp.gate_proj.weight
model.layers.19.mlp.down_proj.weight
model.layers.19.mlp.up_proj.weight
model.layers.19.input_layernorm.weight
model.layers.19.post_attention_layernorm.weight
model.layers.20.self_attn.q_proj.weight
model.layers.20.self_attn.k_proj.weight
model.layers.20.self_attn.v_proj.weight
model.layers.20.self_attn.o_proj.weight
model.layers.20.self_attn.rotary_emb.inv_freq
model.layers.20.mlp.gate_proj.weight
model.layers.20.mlp.down_proj.weight
model.layers.20.mlp.up_proj.weight
model.layers.20.input_layernorm.weight
model.layers.20.post_attention_layernorm.weight
model.layers.21.self_attn.q_proj.weight
model.layers.21.self_attn.k_proj.weight
model.layers.21.self_attn.v_proj.weight
model.layers.21.self_attn.o_proj.weight
model.layers.21.self_attn.rotary_emb.inv_freq
model.layers.21.mlp.gate_proj.weight
model.layers.21.mlp.down_proj.weight
model.layers.21.mlp.up_proj.weight
model.layers.21.input_layernorm.weight
model.layers.21.post_attention_layernorm.weight
model.layers.22.self_attn.q_proj.weight
model.layers.22.self_attn.k_proj.weight
model.layers.22.self_attn.v_proj.weight
model.layers.22.self_attn.o_proj.weight
model.layers.22.self_attn.rotary_emb.inv_freq
model.layers.22.mlp.gate_proj.weight
model.layers.22.mlp.down_proj.weight
model.layers.22.mlp.up_proj.weight
model.layers.22.input_layernorm.weight
model.layers.22.post_attention_layernorm.weight
model.layers.23.self_attn.q_proj.weight
model.layers.23.self_attn.k_proj.weight
model.layers.23.self_attn.v_proj.weight
model.layers.23.self_attn.o_proj.weight
model.layers.23.self_attn.rotary_emb.inv_freq
model.layers.23.mlp.gate_proj.weight
model.layers.23.mlp.down_proj.weight
model.layers.23.mlp.up_proj.weight
model.layers.23.input_layernorm.weight
model.layers.23.post_attention_layernorm.weight
model.layers.24.self_attn.q_proj.weight
model.layers.24.self_attn.k_proj.weight
model.layers.24.self_attn.v_proj.weight
model.layers.24.self_attn.o_proj.weight
model.layers.24.self_attn.rotary_emb.inv_freq
model.layers.24.mlp.gate_proj.weight
model.layers.24.mlp.down_proj.weight
model.layers.24.mlp.up_proj.weight
model.layers.24.input_layernorm.weight
model.layers.24.post_attention_layernorm.weight
model.layers.25.self_attn.q_proj.weight
model.layers.25.self_attn.k_proj.weight
model.layers.25.self_attn.v_proj.weight
model.layers.25.self_attn.o_proj.weight
model.layers.25.self_attn.rotary_emb.inv_freq
model.layers.25.mlp.gate_proj.weight
model.layers.25.mlp.down_proj.weight
model.layers.25.mlp.up_proj.weight
model.layers.25.input_layernorm.weight
model.layers.25.post_attention_layernorm.weight
model.layers.26.self_attn.q_proj.weight
model.layers.26.self_attn.k_proj.weight
model.layers.26.self_attn.v_proj.weight
model.layers.26.self_attn.o_proj.weight
model.layers.26.self_attn.rotary_emb.inv_freq
model.layers.26.mlp.gate_proj.weight
model.layers.26.mlp.down_proj.weight
model.layers.26.mlp.up_proj.weight
model.layers.26.input_layernorm.weight
model.layers.26.post_attention_layernorm.weight
model.layers.27.self_attn.q_proj.weight
model.layers.27.self_attn.k_proj.weight
model.layers.27.self_attn.v_proj.weight
model.layers.27.self_attn.o_proj.weight
model.layers.27.self_attn.rotary_emb.inv_freq
model.layers.27.mlp.gate_proj.weight
model.layers.27.mlp.down_proj.weight
model.layers.27.mlp.up_proj.weight
model.layers.27.input_layernorm.weight
model.layers.27.post_attention_layernorm.weight
model.layers.28.self_attn.q_proj.weight
model.layers.28.self_attn.k_proj.weight
model.layers.28.self_attn.v_proj.weight
model.layers.28.self_attn.o_proj.weight
model.layers.28.self_attn.rotary_emb.inv_freq
model.layers.28.mlp.gate_proj.weight
model.layers.28.mlp.down_proj.weight
model.layers.28.mlp.up_proj.weight
model.layers.28.input_layernorm.weight
model.layers.28.post_attention_layernorm.weight
model.layers.29.self_attn.q_proj.weight
model.layers.29.self_attn.k_proj.weight
model.layers.29.self_attn.v_proj.weight
model.layers.29.self_attn.o_proj.weight
model.layers.29.self_attn.rotary_emb.inv_freq
model.layers.29.mlp.gate_proj.weight
model.layers.29.mlp.down_proj.weight
model.layers.29.mlp.up_proj.weight
model.layers.29.input_layernorm.weight
model.layers.29.post_attention_layernorm.weight
model.layers.30.self_attn.q_proj.weight
model.layers.30.self_attn.k_proj.weight
model.layers.30.self_attn.v_proj.weight
model.layers.30.self_attn.o_proj.weight
model.layers.30.self_attn.rotary_emb.inv_freq
model.layers.30.mlp.gate_proj.weight
model.layers.30.mlp.down_proj.weight
model.layers.30.mlp.up_proj.weight
model.layers.30.input_layernorm.weight
model.layers.30.post_attention_layernorm.weight
model.layers.31.self_attn.q_proj.weight
model.layers.31.self_attn.k_proj.weight
model.layers.31.self_attn.v_proj.weight
model.layers.31.self_attn.o_proj.weight
model.layers.31.self_attn.rotary_emb.inv_freq
model.layers.31.mlp.gate_proj.weight
model.layers.31.mlp.down_proj.weight
model.layers.31.mlp.up_proj.weight
model.layers.31.input_layernorm.weight
model.layers.31.post_attention_layernorm.weight
model.norm.weight
lm_head.weight
----------------------------mega-ds weight list----------------------------
1.word_embeddings.weight
2.input_layernorm.weight
2.self_attention.query_key_value.weight
2.self_attention.dense.weight
2.post_attention_layernorm.weight
2.mlp.dense_h_to_4h.weight
2.mlp.dense_4h_to_h.weight
3.input_layernorm.weight
3.self_attention.query_key_value.weight
3.self_attention.dense.weight
3.post_attention_layernorm.weight
3.mlp.dense_h_to_4h.weight
3.mlp.dense_4h_to_h.weight
4.input_layernorm.weight
4.self_attention.query_key_value.weight
4.self_attention.dense.weight
4.post_attention_layernorm.weight
4.mlp.dense_h_to_4h.weight
4.mlp.dense_4h_to_h.weight
5.input_layernorm.weight
5.self_attention.query_key_value.weight
5.self_attention.dense.weight
5.post_attention_layernorm.weight
5.mlp.dense_h_to_4h.weight
5.mlp.dense_4h_to_h.weight
6.input_layernorm.weight
6.self_attention.query_key_value.weight
6.self_attention.dense.weight
6.post_attention_layernorm.weight
6.mlp.dense_h_to_4h.weight
6.mlp.dense_4h_to_h.weight
7.input_layernorm.weight
7.self_attention.query_key_value.weight
7.self_attention.dense.weight
7.post_attention_layernorm.weight
7.mlp.dense_h_to_4h.weight
7.mlp.dense_4h_to_h.weight
8.input_layernorm.weight
8.self_attention.query_key_value.weight
8.self_attention.dense.weight
8.post_attention_layernorm.weight
8.mlp.dense_h_to_4h.weight
8.mlp.dense_4h_to_h.weight
9.input_layernorm.weight
9.self_attention.query_key_value.weight
9.self_attention.dense.weight
9.post_attention_layernorm.weight
9.mlp.dense_h_to_4h.weight
9.mlp.dense_4h_to_h.weight
10.input_layernorm.weight
10.self_attention.query_key_value.weight
10.self_attention.dense.weight
10.post_attention_layernorm.weight
10.mlp.dense_h_to_4h.weight
10.mlp.dense_4h_to_h.weight
11.input_layernorm.weight
11.self_attention.query_key_value.weight
11.self_attention.dense.weight
11.post_attention_layernorm.weight
11.mlp.dense_h_to_4h.weight
11.mlp.dense_4h_to_h.weight
12.input_layernorm.weight
12.self_attention.query_key_value.weight
12.self_attention.dense.weight
12.post_attention_layernorm.weight
12.mlp.dense_h_to_4h.weight
12.mlp.dense_4h_to_h.weight
13.input_layernorm.weight
13.self_attention.query_key_value.weight
13.self_attention.dense.weight
13.post_attention_layernorm.weight
13.mlp.dense_h_to_4h.weight
13.mlp.dense_4h_to_h.weight
14.input_layernorm.weight
14.self_attention.query_key_value.weight
14.self_attention.dense.weight
14.post_attention_layernorm.weight
14.mlp.dense_h_to_4h.weight
14.mlp.dense_4h_to_h.weight
15.input_layernorm.weight
15.self_attention.query_key_value.weight
15.self_attention.dense.weight
15.post_attention_layernorm.weight
15.mlp.dense_h_to_4h.weight
15.mlp.dense_4h_to_h.weight
16.input_layernorm.weight
16.self_attention.query_key_value.weight
16.self_attention.dense.weight
16.post_attention_layernorm.weight
16.mlp.dense_h_to_4h.weight
16.mlp.dense_4h_to_h.weight
17.input_layernorm.weight
17.self_attention.query_key_value.weight
17.self_attention.dense.weight
17.post_attention_layernorm.weight
17.mlp.dense_h_to_4h.weight
17.mlp.dense_4h_to_h.weight
18.input_layernorm.weight
18.self_attention.query_key_value.weight
18.self_attention.dense.weight
18.post_attention_layernorm.weight
18.mlp.dense_h_to_4h.weight
18.mlp.dense_4h_to_h.weight
19.input_layernorm.weight
19.self_attention.query_key_value.weight
19.self_attention.dense.weight
19.post_attention_layernorm.weight
19.mlp.dense_h_to_4h.weight
19.mlp.dense_4h_to_h.weight
20.input_layernorm.weight
20.self_attention.query_key_value.weight
20.self_attention.dense.weight
20.post_attention_layernorm.weight
20.mlp.dense_h_to_4h.weight
20.mlp.dense_4h_to_h.weight
21.input_layernorm.weight
21.self_attention.query_key_value.weight
21.self_attention.dense.weight
21.post_attention_layernorm.weight
21.mlp.dense_h_to_4h.weight
21.mlp.dense_4h_to_h.weight
22.input_layernorm.weight
22.self_attention.query_key_value.weight
22.self_attention.dense.weight
22.post_attention_layernorm.weight
22.mlp.dense_h_to_4h.weight
22.mlp.dense_4h_to_h.weight
23.input_layernorm.weight
23.self_attention.query_key_value.weight
23.self_attention.dense.weight
23.post_attention_layernorm.weight
23.mlp.dense_h_to_4h.weight
23.mlp.dense_4h_to_h.weight
24.input_layernorm.weight
24.self_attention.query_key_value.weight
24.self_attention.dense.weight
24.post_attention_layernorm.weight
24.mlp.dense_h_to_4h.weight
24.mlp.dense_4h_to_h.weight
25.input_layernorm.weight
25.self_attention.query_key_value.weight
25.self_attention.dense.weight
25.post_attention_layernorm.weight
25.mlp.dense_h_to_4h.weight
25.mlp.dense_4h_to_h.weight
26.input_layernorm.weight
26.self_attention.query_key_value.weight
26.self_attention.dense.weight
26.post_attention_layernorm.weight
26.mlp.dense_h_to_4h.weight
26.mlp.dense_4h_to_h.weight
27.input_layernorm.weight
27.self_attention.query_key_value.weight
27.self_attention.dense.weight
27.post_attention_layernorm.weight
27.mlp.dense_h_to_4h.weight
27.mlp.dense_4h_to_h.weight
28.input_layernorm.weight
28.self_attention.query_key_value.weight
28.self_attention.dense.weight
28.post_attention_layernorm.weight
28.mlp.dense_h_to_4h.weight
28.mlp.dense_4h_to_h.weight
29.input_layernorm.weight
29.self_attention.query_key_value.weight
29.self_attention.dense.weight
29.post_attention_layernorm.weight
29.mlp.dense_h_to_4h.weight
29.mlp.dense_4h_to_h.weight
30.input_layernorm.weight
30.self_attention.query_key_value.weight
30.self_attention.dense.weight
30.post_attention_layernorm.weight
30.mlp.dense_h_to_4h.weight
30.mlp.dense_4h_to_h.weight
31.input_layernorm.weight
31.self_attention.query_key_value.weight
31.self_attention.dense.weight
31.post_attention_layernorm.weight
31.mlp.dense_h_to_4h.weight
31.mlp.dense_4h_to_h.weight
32.input_layernorm.weight
32.self_attention.query_key_value.weight
32.self_attention.dense.weight
32.post_attention_layernorm.weight
32.mlp.dense_h_to_4h.weight
32.mlp.dense_4h_to_h.weight
33.input_layernorm.weight
33.self_attention.query_key_value.weight
33.self_attention.dense.weight
33.post_attention_layernorm.weight
33.mlp.dense_h_to_4h.weight
33.mlp.dense_4h_to_h.weight
34.weight
35.lm_head.weight
----------------------------mapping list----------------------------
mega-ds: ('1.word_embeddings.weight', torch.Size([32000, 4096]))<--hf: ('model.embed_tokens.weight',)  [0:32000,:]  of torch.Size([32000, 4096])
mega-ds:('2.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.0.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('2.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.0.self_attn.q_proj.weight', 'model.layers.0.self_attn.k_proj.weight', 'model.layers.0.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('2.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.0.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('2.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.0.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('2.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.0.mlp.gate_proj.weight', 'model.layers.0.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('2.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.0.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('3.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.1.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('3.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.1.self_attn.q_proj.weight', 'model.layers.1.self_attn.k_proj.weight', 'model.layers.1.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('3.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.1.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('3.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.1.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('3.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.1.mlp.gate_proj.weight', 'model.layers.1.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('3.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.1.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('4.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.2.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('4.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.2.self_attn.q_proj.weight', 'model.layers.2.self_attn.k_proj.weight', 'model.layers.2.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('4.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.2.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('4.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.2.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('4.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.2.mlp.gate_proj.weight', 'model.layers.2.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('4.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.2.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('5.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.3.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('5.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.3.self_attn.q_proj.weight', 'model.layers.3.self_attn.k_proj.weight', 'model.layers.3.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('5.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.3.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('5.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.3.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('5.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.3.mlp.gate_proj.weight', 'model.layers.3.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('5.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.3.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('6.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.4.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('6.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.4.self_attn.q_proj.weight', 'model.layers.4.self_attn.k_proj.weight', 'model.layers.4.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('6.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.4.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('6.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.4.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('6.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.4.mlp.gate_proj.weight', 'model.layers.4.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('6.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.4.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('7.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.5.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('7.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.5.self_attn.q_proj.weight', 'model.layers.5.self_attn.k_proj.weight', 'model.layers.5.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('7.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.5.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('7.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.5.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('7.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.5.mlp.gate_proj.weight', 'model.layers.5.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('7.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.5.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('8.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.6.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('8.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.6.self_attn.q_proj.weight', 'model.layers.6.self_attn.k_proj.weight', 'model.layers.6.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('8.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.6.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('8.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.6.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('8.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.6.mlp.gate_proj.weight', 'model.layers.6.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('8.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.6.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('9.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.7.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('9.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.7.self_attn.q_proj.weight', 'model.layers.7.self_attn.k_proj.weight', 'model.layers.7.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('9.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.7.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('9.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.7.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('9.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.7.mlp.gate_proj.weight', 'model.layers.7.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('9.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.7.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('10.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.8.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('10.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.8.self_attn.q_proj.weight', 'model.layers.8.self_attn.k_proj.weight', 'model.layers.8.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('10.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.8.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('10.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.8.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('10.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.8.mlp.gate_proj.weight', 'model.layers.8.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('10.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.8.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('11.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.9.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('11.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.9.self_attn.q_proj.weight', 'model.layers.9.self_attn.k_proj.weight', 'model.layers.9.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('11.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.9.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('11.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.9.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('11.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.9.mlp.gate_proj.weight', 'model.layers.9.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('11.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.9.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('12.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.10.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('12.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.10.self_attn.q_proj.weight', 'model.layers.10.self_attn.k_proj.weight', 'model.layers.10.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('12.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.10.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('12.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.10.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('12.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.10.mlp.gate_proj.weight', 'model.layers.10.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('12.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.10.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('13.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.11.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('13.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.11.self_attn.q_proj.weight', 'model.layers.11.self_attn.k_proj.weight', 'model.layers.11.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('13.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.11.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('13.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.11.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('13.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.11.mlp.gate_proj.weight', 'model.layers.11.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('13.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.11.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('14.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.12.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('14.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.12.self_attn.q_proj.weight', 'model.layers.12.self_attn.k_proj.weight', 'model.layers.12.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('14.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.12.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('14.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.12.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('14.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.12.mlp.gate_proj.weight', 'model.layers.12.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('14.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.12.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('15.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.13.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('15.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.13.self_attn.q_proj.weight', 'model.layers.13.self_attn.k_proj.weight', 'model.layers.13.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('15.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.13.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('15.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.13.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('15.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.13.mlp.gate_proj.weight', 'model.layers.13.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('15.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.13.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('16.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.14.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('16.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.14.self_attn.q_proj.weight', 'model.layers.14.self_attn.k_proj.weight', 'model.layers.14.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('16.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.14.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('16.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.14.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('16.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.14.mlp.gate_proj.weight', 'model.layers.14.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('16.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.14.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('17.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.15.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('17.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.15.self_attn.q_proj.weight', 'model.layers.15.self_attn.k_proj.weight', 'model.layers.15.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('17.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.15.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('17.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.15.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('17.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.15.mlp.gate_proj.weight', 'model.layers.15.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('17.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.15.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('18.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.16.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('18.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.16.self_attn.q_proj.weight', 'model.layers.16.self_attn.k_proj.weight', 'model.layers.16.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('18.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.16.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('18.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.16.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('18.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.16.mlp.gate_proj.weight', 'model.layers.16.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('18.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.16.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('19.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.17.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('19.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.17.self_attn.q_proj.weight', 'model.layers.17.self_attn.k_proj.weight', 'model.layers.17.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('19.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.17.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('19.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.17.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('19.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.17.mlp.gate_proj.weight', 'model.layers.17.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('19.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.17.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('20.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.18.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('20.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.18.self_attn.q_proj.weight', 'model.layers.18.self_attn.k_proj.weight', 'model.layers.18.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('20.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.18.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('20.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.18.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('20.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.18.mlp.gate_proj.weight', 'model.layers.18.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('20.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.18.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('21.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.19.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('21.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.19.self_attn.q_proj.weight', 'model.layers.19.self_attn.k_proj.weight', 'model.layers.19.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('21.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.19.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('21.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.19.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('21.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.19.mlp.gate_proj.weight', 'model.layers.19.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('21.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.19.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('22.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.20.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('22.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.20.self_attn.q_proj.weight', 'model.layers.20.self_attn.k_proj.weight', 'model.layers.20.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('22.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.20.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('22.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.20.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('22.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.20.mlp.gate_proj.weight', 'model.layers.20.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('22.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.20.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('23.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.21.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('23.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.21.self_attn.q_proj.weight', 'model.layers.21.self_attn.k_proj.weight', 'model.layers.21.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('23.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.21.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('23.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.21.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('23.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.21.mlp.gate_proj.weight', 'model.layers.21.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('23.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.21.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('24.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.22.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('24.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.22.self_attn.q_proj.weight', 'model.layers.22.self_attn.k_proj.weight', 'model.layers.22.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('24.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.22.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('24.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.22.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('24.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.22.mlp.gate_proj.weight', 'model.layers.22.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('24.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.22.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('25.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.23.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('25.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.23.self_attn.q_proj.weight', 'model.layers.23.self_attn.k_proj.weight', 'model.layers.23.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('25.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.23.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('25.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.23.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('25.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.23.mlp.gate_proj.weight', 'model.layers.23.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('25.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.23.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('26.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.24.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('26.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.24.self_attn.q_proj.weight', 'model.layers.24.self_attn.k_proj.weight', 'model.layers.24.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('26.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.24.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('26.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.24.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('26.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.24.mlp.gate_proj.weight', 'model.layers.24.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('26.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.24.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('27.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.25.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('27.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.25.self_attn.q_proj.weight', 'model.layers.25.self_attn.k_proj.weight', 'model.layers.25.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('27.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.25.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('27.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.25.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('27.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.25.mlp.gate_proj.weight', 'model.layers.25.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('27.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.25.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('28.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.26.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('28.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.26.self_attn.q_proj.weight', 'model.layers.26.self_attn.k_proj.weight', 'model.layers.26.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('28.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.26.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('28.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.26.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('28.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.26.mlp.gate_proj.weight', 'model.layers.26.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('28.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.26.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('29.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.27.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('29.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.27.self_attn.q_proj.weight', 'model.layers.27.self_attn.k_proj.weight', 'model.layers.27.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('29.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.27.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('29.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.27.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('29.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.27.mlp.gate_proj.weight', 'model.layers.27.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('29.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.27.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('30.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.28.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('30.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.28.self_attn.q_proj.weight', 'model.layers.28.self_attn.k_proj.weight', 'model.layers.28.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('30.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.28.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('30.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.28.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('30.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.28.mlp.gate_proj.weight', 'model.layers.28.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('30.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.28.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('31.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.29.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('31.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.29.self_attn.q_proj.weight', 'model.layers.29.self_attn.k_proj.weight', 'model.layers.29.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('31.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.29.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('31.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.29.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('31.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.29.mlp.gate_proj.weight', 'model.layers.29.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('31.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.29.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('32.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.30.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('32.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.30.self_attn.q_proj.weight', 'model.layers.30.self_attn.k_proj.weight', 'model.layers.30.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('32.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.30.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('32.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.30.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('32.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.30.mlp.gate_proj.weight', 'model.layers.30.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('32.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.30.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('33.input_layernorm.weight', torch.Size([4096]))<--hf('model.layers.31.input_layernorm.weight',)  torch.Size([4096])
mega-ds:('33.self_attention.query_key_value.weight', torch.Size([12288, 4096]))<--hf('model.layers.31.self_attn.q_proj.weight', 'model.layers.31.self_attn.k_proj.weight', 'model.layers.31.self_attn.v_proj.weight')  cat q,k,v [3968:4096,:]  of q,k,vtorch.Size([4096, 4096])
mega-ds:('33.self_attention.dense.weight', torch.Size([4096, 4096]))<--hf('model.layers.31.self_attn.o_proj.weight',)  [:,0:4096]  of torch.Size([4096, 4096])
mega-ds:('33.post_attention_layernorm.weight', torch.Size([4096]))<--hf('model.layers.31.post_attention_layernorm.weight',)  torch.Size([4096])
mega-ds:('33.mlp.dense_h_to_4h.weight', torch.Size([22016, 4096]))<--hf('model.layers.31.mlp.gate_proj.weight', 'model.layers.31.mlp.up_proj.weight')  cat gate,up [0:11008,:]  of gate,uptorch.Size([11008, 4096])
mega-ds:('33.mlp.dense_4h_to_h.weight', torch.Size([4096, 11008]))<--hf('model.layers.31.mlp.down_proj.weight',)  [:,0:11008]  of torch.Size([4096, 11008])
mega-ds:('34.weight', torch.Size([4096]))<--hf('model.norm.weight',)  torch.Size([4096])
mega-ds: ('35.lm_head.weight', torch.Size([32000, 4096]))<--hf: ('lm_head.weight',)  [0:32000,:]  of torch.Size([32000, 4096])
[2024-03-15 20:40:00,434] [INFO] [launch.py:348:main] Process 8959 exits successfully.
[2024-03-15 20:40:00,434] [INFO] [launch.py:348:main] Process 8956 exits successfully.
[2024-03-15 20:40:00,435] [INFO] [launch.py:348:main] Process 8958 exits successfully.
[2024-03-15 20:40:00,435] [INFO] [launch.py:348:main] Process 8957 exits successfully.
